# -- (int) Number of replicas to deploy
replicaCount: 1

image:
  # -- The image registry to use
  registry: docker.io
  # -- The image repository to use
  repository: devopsfaith/krakend
  # -- The image tag to use
  tag: "2.1.4"
  # -- The image pull policy to use
  pullPolicy: IfNotPresent

krakend:
  # -- (array) The environment variables to use for the krakend container.
  # The default is just the ones needed to enable flexible configuration.
  env:
    - name: FC_ENABLE
      value: '1'
    - name: FC_SETTINGS
      value: '/etc/krakend-src/settings'
    - name: FC_PARTIALS
      value: '/etc/krakend-src/partials'
    - name: FC_TEMPLATES
      value: '/etc/krakend-src/templates'
  # -- (string, optional) If set, this key will contain the full configuration of the krakend service
  config: ""
  # -- The default configuration has a partials file that
  # will be used to load several aspects of the configuration.
  # This is done through an initContainer that copies the partials
  # to the /etc/krakend/partials folder.
  partialsCopierImage:
    # -- (string) The image registry to use for the partials copier
    registry: docker.io
    # -- (string) The image repository to use for the partials copier
    repository: library/alpine
    # -- (string) The image tag to use for the partials copier
    tag: "3.17.1"
    # -- (string) The image pull policy to use for the partials copier
    pullPolicy: IfNotPresent
  # -- (Object) The default configuration has a partials files that
  # will be used to load several aspects of the configuration.
  # If you want to include expra partials, add or remove them here.
  partials:
    input_headers.tmpl: |-
      "input_headers": [
        "Content-Type",
        "ClientId"
      ]
    rate_limit_backend.tmpl: |-
      "qos/ratelimit/proxy": {
        "max_rate": 0.5,
        "capacity": 1
      }
  # -- The default configuration has a settings files that
  # will be used to load several aspects of the configuration.
  settings:
    service.json: |-
      {
      	"port": 8080,
      	"environment": "PRODUCTION",
      	"default_host": "http://localhost:8080",
      	"timeout": "3s",
      	"cache_ttl": "3s",
      	"output_encoding": "json",
      	"extra_config": {}
      }
  # -- While default configuration does not take into use
  # templates; you may want to add your own templates here.
  # Note that you'd need to set a custom configuration file
  # to use them.
  templates: {}
  # -- Given that endpoitns is where most of the verbosity
  # of the configuration is, it's possible to load them
  # from a configmap or from an image. This section allows
  # you to configure the relevant settings.
  endpoints:
    # -- Use this flag to indicate that the endpoints should be
    # loaded from the image instead of the configmap. This
    # happens as an initContainer.
    fromImage: false
    # -- This is the image to use to load the endpoints from.
    # Note that the registry, repository and tag must be set.
    image:
      # -- The image registry to use for the endpoints loader
      registry:
      # -- The image repository to use for the endpoints loader
      # Note that the image must contain a file named endpoints.json
      # at the root of the image.
      repository:
      # -- The image tag to use for the endpoints loader
      tag:
      # -- The image pull policy to use for the endpoints loader
      pullPolicy: IfNotPresent
      # -- The command to use to load the endpoints from the image.
      command: [ "/bin/sh" ]
      # -- The arguments to use to load the endpoints from the image.
      args:
        - "-c"
        - "cp /endpoints.json /endpoints/endpoints.tmpl"
    # -- If `fromImage` is set to false, the endpoints will be loaded from the
    # partials configmap with this configuration
    endpointsConfig: |-
      [
        {
          "endpoint": "/test",
          "method": "GET",
          "backend": [
              {
                  "method": "GET",
                  "host": [],
                  "url_pattern": "/__debug/roots",
                  "encoding": "json",
                  "deny": [
                      "message"
                  ]
              }
          ],
          "extra_config": {
              "proxy": {
                  "static": {
                      "data": {
                          "collection": [
                              {
                                  "directories": [
                                      "Graceland"
                                  ]
                              }
                          ],
                          "version": "deficient"
                      },
                      "strategy": "always"
                  }
              }
          },
          "output_encoding": "json"
        }
      ]

# -- (list) List of secrets containing the credentials to use for the image
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- (bool) Specifies whether a service account should be created
  create: true
  # -- (object) The annotations to use for the service account
  annotations: {}
  # -- (string) The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- (object) The annotations to use for the krakend pod
podAnnotations: {}

# -- (object) The securityContext to use for the krakend pod
podSecurityContext: {}
  # fsGroup: 2000

# -- (object) The securityContext to use for the krakend container
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# -- (object) The service settings to use for the krakend service
service:
  # -- (string) The type of service to use
  type: ClusterIP
  # -- (int) The port to use for the service
  port: 80
  # -- (int) The target port to use for the service
  targetPort: 8080
  # -- (object) The annotations to use for the service
  annotations: {}

# -- (object) The ingress settings to use for the krakend ingress
ingress:
  # -- (bool) Specifies whether an ingress should be created
  enabled: false
  # -- (string) The class to use for the ingress
  className: ""
  # -- (object) The annotations to use for the ingress
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- (list) The list of hosts to use for the ingress
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- (object) The resources to use for the krakend pod
resources: {}

# -- (object) The nodeSelector to use for the krakend pod
nodeSelector: {}

# -- (object) The tolerations to use for the krakend pod
tolerations: []

# -- (object) The affinity to use for the krakend pod
affinity: {}

# -- (array) extraVolumeMounts allows you to mount extra volumes to the krakend pod
extraVolumeMounts: []

# -- (array) extraVolumes allows you to mount extra volumes to the krakend pod
extraVolumes: []
